
//@version=4
study('Mignaly Signal Generator Premium', 'Mignaly Signals', true)

//-------------------- Inputs

sstyle     = input('Scalp','Signal Style', options=['Short Term','Mid Term','Long Term','Scalp'], defval='Scalp')
market    = input('Forex','Choose Market', options=['Forex','Crypto','Stock'])

ptype      = input('Close','Price Type', options=['Open','High','Low','Close','HL2','OC2','OHL3','HLC3','OHLC4'])
reso       = input('',     'Time Frame', input.resolution)
lookback   = input(3,      'Lookback Window Size |2..n| (2)',       minval=2)
nlbk       = input(2,      'Normalization Lookback |2..240| (120)', minval=2,      maxval=240)
lrate      = input(0.0009, 'Learning Rate |0.0001..0.01|',          minval=0.0001, maxval=0.01, step=0.0001)
iterations = input(1000,   'Training Iterations |50..20000|',       minval=50)
// ftype      = input('None', 'Filter Signals by',                     options=['Volatility','Volume','Both','None'])
curves     = input(false,  'Show Loss & Prediction Curves?')
easteregg  = input(true,   'Optional Calculation?')  
useprice   = input(true,   'Use Price Data for Signal Generation?')
holding_p  = input(5,      'Holding Period |1..n|',                 minval=1)
// ptype = 'Close'
// lookback = 3
// iterations = 300
// lrate = 0.0009
// nlbk = 2
// curves = false
// easteregg = true
// useprice = true
// holding_p = 5

ftype = 'None'
if market == 'Forex'
    ftype :='Volatility'
else if market == 'Crypto'
    ftype := 'Both'
else if market == 'Stock'
    ftype := 'Volume'
   

    
if sstyle == 'Long Term'
    lookback := 200
else if sstyle == 'Mid Term'
    lookback := 100
else if sstyle == 'Short Term'
    lookback := 50
    
//-------------------- System Variables

var BUY = 1, var SELL = -1, var HOLD = 0
var signal     = HOLD
var hp_counter = 0

//-------------------- Custom Functions

cAqua(g) =>  g>9?#0080FFff:g>8?#0080FFe5:g>7?#0080FFcc:g>6?#0080FFb2:g>5?#0080FF99
           : g>4?#0080FF7f:g>3?#0080FF66:g>2?#0080FF4c:g>1?#0080FF33:#00C0FF19
cPink(g) =>  g>9?#FF0080ff:g>8?#FF0080e5:g>7?#FF0080cc:g>6?#FF0080b2:g>5?#FF008099
           : g>4?#FF00807f:g>3?#FF008066:g>2?#FF00804c:g>1?#FF008033:#FF008019

volumeBreak(thres) =>  
    rsivol   = rsi(volume, 14)  
    osc      = hma(rsivol, 10)  
    osc > thres                     

volatilityBreak(volmin, volmax) => atr(volmin) > atr(volmax)

dot(v, w, p) => sum(v * w, p)  // dot product

sigmoid(z) => 1.0 / (1.0 + exp(-z))

logistic_regression(X, Y, p, lr, iterations) => 
    w = 0.0, loss = 0.0
    for i=1 to iterations
        hypothesis = sigmoid(dot(X, 0.0, p))  //-- prediction
        loss := -1.0 / p * (dot(dot(Y, log(hypothesis) + (1.0 - Y), p), log(1.0 - hypothesis), p)) 
        gradient = 1.0 / p * (dot(X, hypothesis - Y, p))
        w := w - lr * gradient               //-- update weights
    
    [loss, sigmoid(dot(X, w, p))]            //-- current loss & prediction

minimax(ds, p, min, max) =>  // normalize to price
    hi = highest(ds, p), lo = lowest(ds, p)
    (max - min) * (ds - lo)/(hi - lo) + min

//-------------------- Logic

ds       =  ptype=='Open'  ? open
          : ptype=='High'  ? high 
          : ptype=='Low'   ? low 
          : ptype=='Close' ? close 
          : ptype=='HL2'   ? (high+low)/2 
          : ptype=='OC2'   ? (open+close)/2 
          : ptype=='OHL3'  ? (open+high+low)/3 
          : ptype=='HLC3'  ? (high+low+close)/3 
          :                  (open+high+low+close)/4
		  
base_ds  = security('', reso, ds[barstate.ishistory ? 0 : 1])
synth_ds = log(abs(pow(base_ds, 2) - 1) + .5)  //-- generate a synthetic dataset

base  = easteregg ? time    : base_ds          //-- standard and optional calculation
synth = easteregg ? base_ds : synth_ds         

[loss, prediction] = logistic_regression(base, synth, lookback, lrate, iterations) 
scaled_loss        = minimax(loss,       nlbk, lowest(base_ds, nlbk), highest(base_ds, nlbk))
scaled_prediction  = minimax(prediction, nlbk, lowest(base_ds, nlbk), highest(base_ds, nlbk))

filter =   ftype=='Volatility' ? volatilityBreak(1, 10) 
         : ftype=='Volume'     ? volumeBreak(49) 
         : ftype=='Both'       ? volatilityBreak(1, 10) and volumeBreak(49)
         :                       true

signal :=  useprice ? 
           base_ds < scaled_loss and filter ? SELL : base_ds > scaled_loss and filter ? BUY : nz(signal[1]) 
         : crossunder(scaled_loss, scaled_prediction) and filter ? SELL : crossover(scaled_loss, scaled_prediction) and filter ? BUY : nz(signal[1])  

changed = change(signal)
    
hp_counter := changed ? 0 : hp_counter + 1

startLongTrade  = changed and signal==BUY    
startShortTrade = changed and signal==SELL   
endLongTrade    = (signal==BUY  and hp_counter==holding_p and not changed) or (changed and signal==SELL)
endShortTrade   = (signal==SELL and hp_counter==holding_p and not changed) or (changed and signal==BUY)

//-------------------- Rendering

// plot(curves ? scaled_loss : na,       '', color.blue, 3)
// plot(curves ? scaled_prediction : na, '', color.lime, 3)

plotshape(startLongTrade  ? low  : na, title = "Buy Signal", text = 'Buy', style = shape.labelup, location = location.belowbar, color= cAqua(10),textcolor = color.white, transp = 0, size = size.tiny)
plotshape(startShortTrade ? high : na, title = "Sell Signal", text = 'Sell', style = shape.labeldown, location = location.abovebar, color= cPink(10),textcolor = color.white, transp = 0, size = size.tiny)
plot(endLongTrade         ? high : na, 'Buy SL',  cAqua(6), 2, plot.style_cross)
plot(endShortTrade        ? low  : na, 'Sell SL', cPink(6), 2, plot.style_cross)

//-------------------- stoploss
// shosltp     = input(false,  'Show Stop loss and Take profit')
 
length = 14
// length = input(14, minval=1)
atr_factor = input(title="SL Distance", type=input.float,defval=1,step=0.1, group='Money Managment')
r_r_ratio = input(title="Risk:Reward", type=input.integer,defval=2,step=1, group='Money Managment')

r_r_ratio := r_r_ratio +2
atr = (sma(tr*100/close[1], length)*atr_factor)
SLPerc = atr
TP1Perc = atr
TP2Perc = 5 * atr
// TP1_Ratio = input(title="Sell Postion Size % @ TP1", type=input.float, defval=50, step=1, group="TP & SL", tooltip="Example: 50 closing 50% of the position once TP1 is reached")/100


sl_buy =  low[1] - (atr_factor * (((atr/100) * (close[1]/ syminfo.mintick)) * syminfo.mintick * 1 / abs(1)))
tp_buy = high[1] + (atr_factor * (r_r_ratio*(((atr/100) * (close[1]/ syminfo.mintick)) * syminfo.mintick * 1 / abs(1))) )
sl_sell =   high[1] + (atr_factor * (((atr/100) * (close[1]/ syminfo.mintick)) * syminfo.mintick * 1 / abs(1)))
tp_sell = low[1] -( atr_factor * (r_r_ratio*(((atr/100) * (close[1]/ syminfo.mintick)) * syminfo.mintick * 1 / abs(1)) ))


eng_buy = startLongTrade
eng_sell = startShortTrade
var line l_close = na
var line l_open = na
l_close_level = eng_buy? sl_buy :na
l_close_level_sell = eng_sell?  sl_sell:na
l_open_level_sell = eng_sell?  tp_sell:na
l_open_level =eng_buy? tp_buy : na
show_sl_tp = input(title="Show SL & TP", type=input.bool,defval=true, group='Money Managment')

// if l_close[3] != na
//     line.delete(l_close[3])
//     line.delete(l_open[3])
latest_sl =0.0
latest_tp =0.0

if eng_buy and show_sl_tp 
    latest_sl := sl_buy
    latest_tp := tp_buy
else if eng_sell and show_sl_tp 
    latest_sl := sl_sell
    latest_tp := tp_sell
else
    latest_sl := latest_sl[1]
    latest_tp := latest_tp[1]
    
if eng_buy and show_sl_tp 
    line.set_x2(l_close, bar_index)
    // line.set_extend(l_close, extend.none)
    line.set_x2(l_open, bar_index)
    // line.set_extend(l_open, extend.none)
    l_close := line.new(bar_index, l_close_level, bar_index+40, l_close_level, extend=extend.none, width=1, color = cPink(10))
    l_open := line.new(bar_index, l_open_level, bar_index+40, l_open_level, extend=extend.none, width=1, color = cAqua(10))

    
else if eng_sell and show_sl_tp 
    line.set_x2(l_close, bar_index)
    // line.set_extend(l_close, extend.none)
    line.set_x2(l_open, bar_index)
    // line.set_extend(l_open, extend.none)
    l_close := line.new(bar_index-5, l_close_level_sell, bar_index+40, l_close_level_sell, extend=extend.none, width=1, color = cPink(10))
    l_open := line.new(bar_index-5, l_open_level_sell, bar_index+40, l_open_level_sell, extend=extend.none, width=1, color = cAqua(10))
    // line.delete(l_open[1])
    // line.delete(l_close[1])

if (eng_buy or eng_sell) and show_sl_tp
    line.delete(l_open[1])
    line.delete(l_close[1])

// ------------------
var label stoploss = na
var label takeprofit = na
if eng_buy and show_sl_tp 
    stoploss := label.new(bar_index+40, l_close_level, style=label.style_none,color = cPink(10),text='Stop Loss')
    takeprofit := label.new(bar_index+40, l_open_level, style=label.style_none, color = cAqua(10),text='Take Profit')

    
else if eng_sell and show_sl_tp 
    stoploss := label.new(bar_index+40, l_close_level_sell, style=label.style_none,color = cPink(10),text='Stop Loss')
    takeprofit := label.new(bar_index+40, l_open_level_sell, style=label.style_none, color = cAqua(10),text='Take Profit')


if (eng_buy or eng_sell) and show_sl_tp
    label.delete(stoploss[1])
    label.delete(takeprofit[1])

//-------------------- Alerting

alertcondition(startLongTrade,  'Buy',  'Go long!')
alertcondition(startShortTrade, 'Sell', 'Go short!') 
alertcondition(startLongTrade or startShortTrade, 'Alert', 'Deal Time!') //-- general alert

//-------------------- Backtesting (TODO)

// lot_size  = input(0.01, 'Lot Size', options=[0.01,0.1,0.2,0.3,0.5,1,2,3,5,10,20,30,50,100,1000]) 
lot_size=0.01
ohl3 = (open+high+low)/3

var float start_long_trade  = 0.  
var float long_trades       = 0.
var float start_short_trade = 0.  
var float short_trades      = 0.
var int   wins              = 0
var int   trade_count       = 0

if startLongTrade 
    start_long_trade := ohl3 
if endLongTrade
    trade_count  := 1
    ldiff = (ohl3 - start_long_trade)
    wins         := ldiff > 0 ? 1 : 0
    long_trades  := ldiff * lot_size   
if startShortTrade 
    start_short_trade := ohl3
if endShortTrade
    trade_count  := 1
    sdiff = (start_short_trade - ohl3)
    wins         := sdiff > 0 ? 1 : 0
    short_trades := sdiff * lot_size 
    
cumreturn   = cum(long_trades) + cum(short_trades)  //-- cumulative return 
totaltrades = cum(trade_count)
totalwins   = cum(wins)  
totallosses = totaltrades - totalwins == 0 ? 1 : totaltrades - totalwins

//-------------------- Information

show_info = input(false, 'Show Info?')
// show_info = false
var label lbl = na

tbase = (time - time[1]) / 1000
tcurr = (timenow - time_close[1]) / 1000

info =  'CR='          + tostring(cumreturn,             '#.#') 
      + '\nTrades: '   + tostring(totaltrades,           '#')
      + '\nWin/Loss: ' + tostring(totalwins/totallosses, '#.##') 
      + '\nWinrate: '  + tostring(totalwins/totaltrades, '#.#%') 
      + '\nBar Time: ' + tostring(tcurr / tbase,         '#.#%')

if show_info and barstate.islast  
    lbl := label.new(bar_index, close, info, xloc.bar_index, yloc.price, 
                     color.new(color.blue, 100), label.style_label_left, color.black, size.small, text.align_left)
    label.delete(lbl[1])

